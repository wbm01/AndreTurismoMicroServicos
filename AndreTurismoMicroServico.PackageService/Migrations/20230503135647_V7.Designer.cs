// <auto-generated />
using System;
using AndreTurismoMicroServico.PackageService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AndreTurismoMicroServico.PackageService.Migrations
{
    [DbContext(typeof(AndreTurismoMicroServicoPackageServiceContext))]
    [Migration("20230503135647_V7")]
    partial class V7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<int>("Id_Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Address"), 1L, 1);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DtRegister_Address")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_City_AddressId_City")
                        .HasColumnType("int");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Address");

                    b.HasIndex("Id_City_AddressId_City");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Models.City", b =>
                {
                    b.Property<int>("Id_City")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_City"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DtRegister_City")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_City");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressClientId_Address")
                        .HasColumnType("int");

                    b.Property<DateTime>("DtRegisterClient")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressClientId_Address");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Models.Hotel", b =>
                {
                    b.Property<int>("Id_Hotel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Hotel"), 1L, 1);

                    b.Property<DateTime>("DtRegister_Hotel")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Hotel_Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Id_Address_HotelId_Address")
                        .HasColumnType("int");

                    b.Property<string>("Name_Hotel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Hotel");

                    b.HasIndex("Id_Address_HotelId_Address");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("Models.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientPackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DtRegisterPackage")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelPackageId_Hotel")
                        .HasColumnType("int");

                    b.Property<int>("TicketPackageId")
                        .HasColumnType("int");

                    b.Property<double>("ValuePackage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientPackageId");

                    b.HasIndex("HotelPackageId_Hotel");

                    b.HasIndex("TicketPackageId");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTicket")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinyId_Address")
                        .HasColumnType("int");

                    b.Property<int>("OriginId_Address")
                        .HasColumnType("int");

                    b.Property<decimal>("ValueTicket")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientTicketId");

                    b.HasIndex("DestinyId_Address");

                    b.HasIndex("OriginId_Address");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.HasOne("Models.City", "Id_City_Address")
                        .WithMany()
                        .HasForeignKey("Id_City_AddressId_City")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_City_Address");
                });

            modelBuilder.Entity("Models.Client", b =>
                {
                    b.HasOne("Models.Address", "AddressClient")
                        .WithMany()
                        .HasForeignKey("AddressClientId_Address")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressClient");
                });

            modelBuilder.Entity("Models.Hotel", b =>
                {
                    b.HasOne("Models.Address", "Id_Address_Hotel")
                        .WithMany()
                        .HasForeignKey("Id_Address_HotelId_Address")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_Address_Hotel");
                });

            modelBuilder.Entity("Models.Package", b =>
                {
                    b.HasOne("Models.Client", "ClientPackage")
                        .WithMany()
                        .HasForeignKey("ClientPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Hotel", "HotelPackage")
                        .WithMany()
                        .HasForeignKey("HotelPackageId_Hotel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Ticket", "TicketPackage")
                        .WithMany()
                        .HasForeignKey("TicketPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientPackage");

                    b.Navigation("HotelPackage");

                    b.Navigation("TicketPackage");
                });

            modelBuilder.Entity("Models.Ticket", b =>
                {
                    b.HasOne("Models.Client", "ClientTicket")
                        .WithMany()
                        .HasForeignKey("ClientTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Address", "Destiny")
                        .WithMany()
                        .HasForeignKey("DestinyId_Address")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Address", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId_Address")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientTicket");

                    b.Navigation("Destiny");

                    b.Navigation("Origin");
                });
#pragma warning restore 612, 618
        }
    }
}
